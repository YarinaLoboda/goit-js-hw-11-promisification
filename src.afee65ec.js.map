{"version":3,"sources":["js/promise.js","index.js"],"names":["refs","containerRef","document","querySelector","task1LinkRef","task2LinkRef","task3LinkRef","delayStart","innerHTML","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","toggleUserStateStart","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransactionStart","randomIntegerFromInterval","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","addEventListener"],"mappings":";;;AAAA,MAAMA,EAAO,CACXC,aAAcC,SAASC,cAAc,oBACrCC,aAAcF,SAASC,cAAc,cACrCE,aAAcH,SAASC,cAAc,cACrCG,aAAcJ,SAASC,cAAc,eAQvC,SAASI,IACPP,EAAKC,aAAaO,UAChB,uGAEIC,MAAAA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAInB,SAASK,IACPnB,EAAKC,aAAaO,UAChB,iHAEIY,MAAAA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAId,QAAQC,IAIjBA,EAHqBY,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAK7Db,EAASc,GAAgBZ,QAAQa,MAAMD,GAE7CL,EAAgBH,EAAO,SAASF,KAAKJ,GACrCS,EAAgBH,EAAO,OAAOF,KAAKJ,GAIrC,SAASgB,IACP9B,EAAKC,aAAaO,UAChB,iHAEIuB,MAIAC,EAAkBC,GACf,IAAItB,QAAQ,CAACC,EAASsB,KACrBzB,MAAAA,EANwB,EAAC0B,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAKpCJ,CAA0B,IAAK,KAE7ClB,WAAW,KACUwB,KAAKE,SAAW,GAGjC3B,EAAQ,CAAE4B,GAAIP,EAAYO,GAAIzB,KAAMN,IAEpCyB,EAAOD,EAAYO,KAEpB/B,KAIDgC,EAAa,EAAGD,GAAAA,EAAIzB,KAAAA,MACxBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAG/CR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAC/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GApFlE1C,EAAKI,aAAa0C,iBAAiB,QAASvC,GAC5CP,EAAKK,aAAayC,iBAAiB,QAAS3B,GAC5CnB,EAAKM,aAAawC,iBAAiB,QAAShB;;ACP5C,aAFA,QAAA,oBAEA,QAAA","file":"src.afee65ec.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\r\n  containerRef: document.querySelector('div.js-container'),\r\n  task1LinkRef: document.querySelector('a.js-task1'),\r\n  task2LinkRef: document.querySelector('a.js-task2'),\r\n  task3LinkRef: document.querySelector('a.js-task3'),\r\n};\r\n\r\nrefs.task1LinkRef.addEventListener('click', delayStart);\r\nrefs.task2LinkRef.addEventListener('click', toggleUserStateStart);\r\nrefs.task3LinkRef.addEventListener('click', makeTransactionStart);\r\n\r\n////////////////// delayStart\r\nfunction delayStart() {\r\n  refs.containerRef.innerHTML =\r\n    '<p><a href=\"./\">GoTo MAIN MENU</a></p><h2>Task1: Delay function</h2><hr><h3>Look at the concole</h3>';\r\n\r\n  const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => resolve(ms), ms);\r\n    });\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n}\r\n\r\n//////////////////////////// toggleUserState\r\nfunction toggleUserStateStart() {\r\n  refs.containerRef.innerHTML =\r\n    '<p><a href=\"./\">GoTo MAIN MENU</a></p><h2>Task2: toggleUserState function</h2><hr><h3>Look at the concole</h3>';\r\n\r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      resolve(updatedUsers);\r\n    });\r\n  };\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n}\r\n////////////  makeTransaction\r\n\r\nfunction makeTransactionStart() {\r\n  refs.containerRef.innerHTML =\r\n    '<p><a href=\"./\">GoTo MAIN MENU</a></p><h2>Task3: makeTransaction function</h2><hr><h3>Look at the concole</h3>';\r\n\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n          resolve({ id: transaction.id, time: delay });\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n}\r\n","import './sass/main.scss';\n// import './js/color-switcher'; //task1\nimport './js/promise'; //task2\n// import './js/timer-countdown'; //task3\n"]}